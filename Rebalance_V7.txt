Sub Rebalance()

' Create by TLN
' Main path for rebal is S:\Trading Dept\Ron Reyes\Last Rebal
' Path for Schwab file is S:\Trading Dept\Ron Reyes\Schwab Files\Confirms; file name is 0820-3701 MM-DD-YY
' Path for FIDO file is S:\Trading Dept\Ron Reyes\FIDO Excel Trade Blotter\Trade Detail; file name is FIDO TRADE DETAIL TD MM-DD-YY
' Place both Schwab and FIDO files in main path (S:\Trading Dept\Ron Reyes\Last Rebal)
' TLN 5/23/17 Added e-mail capability; added 5th rebalance cheet to look for
' TLN 5/24/17 Included additional columns for reference; added function to find duplicates
' TLN 5/29/17 Added capability to rename files
' TLN 6/07/17 Updated to use only three files
' TLN 6/28/17 added function to remove trades from DCA file
' TLN 7/07/17 added FIDO exception list and check if input trade is within range
' TLN 7/11/17 Test for Git

'schwab and fido trade date

Dim TradeDate As Variant
Dim tradeDateForFiles As Variant
Dim year_short As String

TradeDate = InputBox("Please enter trade date." & vbNewLine & "NOTE: Date Format should be MM-DD")

'manipulate input date
TradeDate = Replace(TradeDate, "-", "/")
tradeDateForFiles = TradeDate & "/"
TradeDate = TradeDate & "/" & Year(Date)


'manipulate for files
year_short = Year(Date)
year_short = Right(year_short, Len(year_short) - 2)


tradeDateForFiles = tradeDateForFiles & year_short
tradeDateForFiles = Replace(tradeDateForFiles, "/", "-")


'add a zero if it doesn't exist already
If InStr(tradeDateForFiles, "-") = 2 Then

    tradeDateForFiles = "0" & tradeDateForFiles

End If


'remove zero in month
TradeDate = RemoveFirstCharRebalance(TradeDate)

'remove zero if day is single digits
TradeDate = Replace(TradeDate, "/0", "/")

'check folder and rename files for xml
countAndRenameFiles (tradeDateForFiles)


'check folder for original xml files
Dim xml_1 As String
Dim xml_2 As String
Dim xml_3 As String


xml_1 = "S:\Trading Dept\Ron Reyes\Last Rebal\XML Files Downloaded\Last Rebal 1 TD " & tradeDateForFiles & ".xml"
xml_2 = "S:\Trading Dept\Ron Reyes\Last Rebal\XML Files Downloaded\Last Rebal 2 TD " & tradeDateForFiles & ".xml"
xml_3 = "S:\Trading Dept\Ron Reyes\Last Rebal\XML Files Downloaded\Last Rebal 3 TD " & tradeDateForFiles & ".xml"


Test_File_Exist_With_Dir_Rebalance (xml_1)
Test_File_Exist_With_Dir_Rebalance (xml_2)
Test_File_Exist_With_Dir_Rebalance (xml_3)



Test_If_File_Is_Open_Rebalance (xml_1)
Test_If_File_Is_Open_Rebalance (xml_2)
Test_If_File_Is_Open_Rebalance (xml_3)



'check if input date is less than current date
If CDate(TradeDate) < (Date - 4) Then
    MsgBox "Please review the trade date that was entered in input box"
    Exit Sub
End If


'Call function to create xlsx files
Call ConvertXmlToXlsxRebalance


'check folder for files if they exist

Dim rebal1 As String
Dim rebal2 As String
Dim rebal3 As String
Dim rebal4 As String
Dim rebal5 As String
Dim fidoFile As String


rebal1 = "S:\Trading Dept\Ron Reyes\Last Rebal\Last Rebal 1 TD " & tradeDateForFiles & ".xlsx"
rebal2 = "S:\Trading Dept\Ron Reyes\Last Rebal\Last Rebal 2 TD " & tradeDateForFiles & ".xlsx"
rebal3 = "S:\Trading Dept\Ron Reyes\Last Rebal\Last Rebal 3 TD " & tradeDateForFiles & ".xlsx"

fidoFile = "S:\Trading Dept\Ron Reyes\Last Rebal\FIDO TRADE  DETAIL TD " & tradeDateForFiles & ".csv"


Test_File_Exist_With_Dir_Rebalance (rebal1)
Test_File_Exist_With_Dir_Rebalance (rebal2)
Test_File_Exist_With_Dir_Rebalance (rebal3)

Test_File_Exist_With_Dir_Rebalance (fidoFile)

Test_If_File_Is_Open_Rebalance (rebal1)
Test_If_File_Is_Open_Rebalance (rebal2)
Test_If_File_Is_Open_Rebalance (rebal3)

Test_If_File_Is_Open_Rebalance (fidoFile)


'Grab the four files and combine into new worksheet
Dim ws_main As Worksheet
Set ws_main = ActiveSheet


Columns("A:A").Select
Selection.NumberFormat = "General"


'run dca function
Call removeDCA("Schwab")


Sheets.Add After:=ActiveSheet
 
Dim ws_rebal_data  As Worksheet
Set ws_rebal_data = ActiveSheet

ws_rebal_data.Name = "Rebalance Data"
        
        

'first book
Dim wb_1 As Workbook
Set wb_1 = Workbooks.Open(rebal1)

    
Dim ws_1 As Worksheet
Set ws_1 = ActiveSheet


'copy used area, including header, into sheet Rebalance Data
ActiveSheet.UsedRange.Copy

ws_rebal_data.Activate


Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
    :=False, Transpose:=False



'second book
Dim wb_2 As Workbook
Set wb_2 = Workbooks.Open(rebal2)

    
Dim ws_2 As Worksheet
Set ws_2 = ActiveSheet


'copy used area, excluding header, into the end of sheet Rebalance Data

ActiveSheet.UsedRange.Copy

ws_rebal_data.Activate

'do paste here
Dim LastRow As Long

LastRow = Cells(Rows.Count, "A").End(xlUp).Row

Application.DisplayAlerts = False
ws_rebal_data.Range("A" & LastRow + 1).PasteSpecial xlPasteValues
Application.DisplayAlerts = True

'delete lastrow+1
Rows(LastRow + 1).Delete


'third book
Dim wb_3 As Workbook
Set wb_3 = Workbooks.Open(rebal3)
   

Dim ws_3 As Worksheet
Set ws_3 = ActiveSheet


'copy used area, excluding header, into the end of sheet Rebalance Data

ActiveSheet.UsedRange.Copy


ws_rebal_data.Activate

'do paste here
Dim lastRow1 As Long

lastRow1 = Cells(Rows.Count, "A").End(xlUp).Row

Application.DisplayAlerts = False
ws_rebal_data.Range("A" & lastRow1 + 1).PasteSpecial xlPasteValues
Application.DisplayAlerts = True

'delete lastrow+1
Rows(lastRow1 + 1).Delete



'format data

Columns("C:C").Select
Range("C1").Activate
Selection.Delete Shift:=xlToLeft
'Columns("E:E").Select
'Columns("E:E").EntireColumn.AutoFit
'Columns("E:E").Select
'Selection.Delete Shift:=xlToLeft
'ActiveWindow.SmallScroll Down:=-21
Cells.Select
Cells.EntireColumn.AutoFit


'close rebal files
wb_1.Close
wb_2.Close
wb_3.Close


'open fido
'fourth book
Dim wb_FIDO As Workbook
    
Set fd = Application.FileDialog(msoFileDialogFilePicker)
Set wb_FIDO = Workbooks.Open(fidoFile)

'run dca function
Call removeDCA("Fido")


'copy used area, excluding header, into the end of sheet Rebalance Data

ActiveSheet.UsedRange.Copy


ws_rebal_data.Activate

Sheets.Add After:=ActiveSheet


Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
    :=False, Transpose:=False



Dim ws_fido As Worksheet
Set ws_fido = ActiveSheet

ws_fido.Name = "FIDO"


'close fido workbook
Application.DisplayAlerts = False
wb_FIDO.Close
Application.DisplayAlerts = True


'convert column A to text
ws_main.Activate
Columns("A:A").Select

Call NumToTextRebal


'apply filters based on input trade entered

ActiveSheet.UsedRange.AutoFilter Field:=2, Criteria1:=TradeDate, Operator:=xlAnd


ActiveSheet.UsedRange.AutoFilter Field:=5, Criteria1:= _
        "<>CANCEL", Operator:=xlAnd


'copy and paste into new sheet

Dim ws_schwab_final As Worksheet
ActiveSheet.UsedRange.Copy


Set ws_schwab_final = Sheets.Add
ActiveSheet.Paste
ws_schwab_final.Name = "Schwab Final"



Application.DisplayAlerts = False
ws_main.Delete
Application.DisplayAlerts = True



'filter fido and paste into new sheet
ws_fido.Activate

Columns("Q:Q").Select
Selection.NumberFormat = "m/d/yyyy"
    

ActiveSheet.UsedRange.AutoFilter Field:=17, Criteria1:=TradeDate, Operator:=xlAnd


Dim ws_fido_final As Worksheet
ActiveSheet.UsedRange.Copy


Set ws_fido_final = Sheets.Add
ActiveSheet.Paste
ws_fido_final.Name = "Fido Final"


Application.DisplayAlerts = False
ws_fido.Delete
Application.DisplayAlerts = True


'do vlookup for schwab
ws_rebal_data.Activate
Columns("E:E").Select
Selection.NumberFormat = "m/d/yyyy"
    
    
'format schwab and fido columns
Range("F1").Select
ActiveCell.FormulaR1C1 = "From Schwab"
Range("G3").Select
Columns("E:E").EntireColumn.AutoFit
Range("G1").Select
ActiveCell.FormulaR1C1 = "From FIDO"
Range("H2").Select
Columns("G:G").EntireColumn.AutoFit


Range("F2").Select
'ActiveCell.FormulaR1C1 = "=VLOOKUP(C[-2],'Schwab Final'!C[-4]:C[-3],2,0)"
ActiveCell.FormulaR1C1 = "=VLOOKUP(C[-2],'Schwab Final'!C[-5]:C[-4],2,0)"
    
Range("A1").Select
Selection.End(xlDown).Select
ActiveCell.Offset(0, 5).Select
Range(Selection, Selection.End(xlUp)).Select
Selection.FillDown


'format column to date
Columns("F:F").Select
Selection.NumberFormat = "m/d/yyyy"



'do vlookup for fido
Range("G2").Select
'ActiveCell.FormulaR1C1 = "=VLOOKUP(C[-4],'Fido Final'!C[-5]:C[11],17,0)"
ActiveCell.FormulaR1C1 = "=VLOOKUP(C[-3],'Fido Final'!C[-6]:C[10],17,0)"

Range("A1").Select
Selection.End(xlDown).Select
ActiveCell.Offset(0, 6).Select
Range(Selection, Selection.End(xlUp)).Select
Selection.FillDown


'format column to date
Columns("G:G").Select
Selection.NumberFormat = "m/d/yyyy"


'move sheet
Sheets("Rebalance Data").Select
Sheets("Rebalance Data").Move Before:=Sheets(1)
    

'copy paste values for column E and F
Columns("F:G").Select
Selection.Copy
Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
    :=False, Transpose:=False
'Range("H6").Select
'Application.CutCopyMode = False
'ActiveCell.FormulaR1C1 = ""
'Range("H3").Select

'replace rebalance dates
Dim r As Range, r1 As Range, cell As Range
Dim schwab As Variant
Dim fido As Variant
Dim x As Integer
Dim y As Integer


Dim lr As Long
lr = Cells(Rows.Count, "A").End(xlUp).Row


For x = 2 To lr

    schwab = Cells(x, "F").Value
    
    If IsDate(schwab) Then
    
            Range("F" & x).Select
            Selection.Copy
            Range("E" & x).Select
            ActiveSheet.Paste
                    
    End If

Next x


For y = 2 To lr

    fido = Cells(y, "G").Value
    
    If IsDate(fido) Then
    
            Range("G" & y).Select
            Selection.Copy
            Range("E" & y).Select
            ActiveSheet.Paste
                    
    End If

Next y

'remove columns E and F
Columns("F:G").Select
Selection.Delete Shift:=xlToLeft


'do check for orphan records
ws_schwab_final.Activate

Dim ws_schwab_dup As Worksheet
ActiveSheet.UsedRange.Copy


Set ws_schwab_dup = Sheets.Add
ActiveSheet.Paste
ws_schwab_dup.Name = "Schwab Dup"


ws_fido_final.Activate

Dim ws_fido_dup As Worksheet
ActiveSheet.UsedRange.Copy


Set ws_fido_dup = Sheets.Add
ActiveSheet.Paste
ws_fido_dup.Name = "Fido Dup"


Set schwab_fido_dup = Sheets.Add
schwab_fido_dup.Name = "Schwab and Fido Dup"

Range("A1").Select
ActiveCell.FormulaR1C1 = "Account"
Range("B1").Select
ActiveCell.FormulaR1C1 = "Exists?"


ws_schwab_dup.Activate

Columns("A:A").Select
ActiveSheet.Range("A:A").RemoveDuplicates Columns:=1, Header:=xlYes


Range("A2").Select
Range(ActiveCell, ActiveCell.End(xlDown)).Select
Selection.Copy


schwab_fido_dup.Activate

'do paste here
Dim LastRow3 As Long

LastRow3 = Cells(Rows.Count, "A").End(xlUp).Row

Application.DisplayAlerts = False
schwab_fido_dup.Range("A" & LastRow3 + 1).PasteSpecial xlPasteValues
Application.DisplayAlerts = True


ws_fido_dup.Activate
ActiveSheet.Range("A:A").RemoveDuplicates Columns:=1, Header:=xlYes
Range("A2").Select
Range(ActiveCell, ActiveCell.End(xlDown)).Select
Selection.Copy

schwab_fido_dup.Activate

'do paste here
Dim LastRow4 As Long

LastRow4 = Cells(Rows.Count, "A").End(xlUp).Row

Application.DisplayAlerts = False
schwab_fido_dup.Range("A" & LastRow4 + 1).PasteSpecial xlPasteValues
Application.DisplayAlerts = True


'remove temp sheets
Application.DisplayAlerts = False
ws_schwab_dup.Delete
ws_fido_dup.Delete
Application.DisplayAlerts = True

'activate main sheet and filter for input date
ws_rebal_data.Activate
ActiveSheet.UsedRange.AutoFilter Field:=5, Criteria1:=TradeDate, Operator:=xlAnd

Dim ws_rebal_data_temp As Worksheet
ActiveSheet.UsedRange.Copy

Set ws_rebal_data_temp = Sheets.Add
ActiveSheet.Paste
ws_rebal_data_temp.Name = "Rebal Data Temp"


schwab_fido_dup.Activate


Range("B2").Select
ActiveCell.FormulaR1C1 = "=VLOOKUP(C[-1],'Rebal Data Temp'!C[2],1,0)"


'do fill down here
Range("A1").Select
Selection.End(xlDown).Select
ActiveCell.Offset(0, 1).Select
Range(Selection, Selection.End(xlUp)).Select
Selection.FillDown


ActiveSheet.UsedRange.AutoFilter Field:=2, Criteria1:="#N/A", Operator:=xlAnd


Dim ws_schwab_dup_final As Worksheet
ActiveSheet.UsedRange.Copy


Set ws_schwab_dup_final = Sheets.Add
ActiveSheet.Paste
ws_schwab_dup_final.Name = "Schwab and Fido Dup Final"



'remove temp sheets
Application.DisplayAlerts = False
ws_rebal_data_temp.Delete
schwab_fido_dup.Delete
Application.DisplayAlerts = True


ws_schwab_dup_final.Activate

Dim k As Long
k = ws_schwab_dup_final.UsedRange.Rows.Count

If k > 2 Then
    'run email proc
    ActiveSheet.UsedRange.Select
    
    
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    


    Dim rng As Range
    Dim image As String
    
    Set rng = Nothing
                On Error Resume Next
                Set rng = Sheets("Schwab and Fido Dup Final").Range("A:B").SpecialCells(xlCellTypeVisible)
                On Error GoTo 0
    image = RangetoHTML(rng)


    With Application
             .EnableEvents = False
             .ScreenUpdating = False
    End With
        
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)

    On Error Resume Next
    With OutMail
        .To = "rreyes@seia.com"
        .cc = ""
        .Subject = "The following accounts don't exist in the rebalance files"
        .HTMLbody = image
        .Display   'or use .Send
    End With
    On Error GoTo 0
    
    
    With Application
        .EnableEvents = True
        .ScreenUpdating = True
    End With

    Set OutMail = Nothing
    Set OutApp = Nothing
    

End If


Application.DisplayAlerts = False
ws_schwab_dup_final.Delete
Application.DisplayAlerts = True


ws_rebal_data.Activate


'copy and paste into new sheet, romove all other sheets
Dim ws_rebal_to_upload As Worksheet
ActiveSheet.UsedRange.Copy


Set ws_rebal_to_upload = Sheets.Add
ActiveSheet.Paste
ws_rebal_to_upload.Name = "Upload"


'close the other work sheets
Application.DisplayAlerts = False
ws_rebal_data.Delete
ws_schwab_final.Delete
ws_fido_final.Delete
Application.DisplayAlerts = True
              
              
              
'hide the first two columns
Columns("A:B").Select
Range("B1").Activate
Selection.EntireColumn.Hidden = True
Cells.Select
Range("C1").Activate
Cells.EntireColumn.AutoFit



'get number of duplicates
Dim dupCount As Long
dupCount = countDuplicates()


'check for duplicates; if they exist, send a message box
Call FindDuplicatesRebal


'get row count of Upload sheet
Dim activeSheetRowCount As Long
activeSheetRowCount = (Cells(Sheets("Upload").Rows.Count, 1).End(xlUp).Row) - 1

              
'save file in rebal folder
ActiveWorkbook.SaveAs "S:\Trading Dept\Ron Reyes\Last Rebal\" & "Last Rebal Final as of " & tradeDateForFiles & ".xlsx", FileFormat:=51


'set signature
Dim signature As String
signature = getSignature()

Dim stringBody As String

stringBody = "Richard,<br>" & _
            "These are the records that will have their rebalance date updated.<br>"

With Application
    .EnableEvents = False
    .ScreenUpdating = False
End With

Set OutApp = CreateObject("Outlook.Application")
Set OutMail = OutApp.CreateItem(0)

On Error Resume Next
With OutMail
    .To = "rpara@seia.com"
    .cc = "rreyes@seia.com; tnguyen@seia.com; toan.nguyen@seia.com;"
    .Subject = "Rebalance Upload"
    .HTMLbody = stringBody & signature
    .Attachments.Add ActiveWorkbook.FullName
    .Display  'or use .Send
End With
On Error GoTo 0


With Application
    .EnableEvents = True
    .ScreenUpdating = True
End With

Set OutMail = Nothing
Set OutApp = Nothing


'run function here for xml file
Call rebalancePart2(xml_1, tradeDateForFiles)
Call rebalancePart2(xml_2, tradeDateForFiles)
Call rebalancePart2(xml_3, tradeDateForFiles)



'Return row count of XML files
Dim xmlRowCount As Integer
xmlRowCount = XMLCountRows()


MsgBox "Number of Duplicates: " & dupCount & vbCrLf & "Unique Records to be Updated: " & activeSheetRowCount & vbCrLf & "Number of Records to be Uploaded to CRM: " & xmlRowCount, , "Record Count Summary"


'move xml files to final destination
Call moveXML

End Sub

Sub NumToTextRebal()

' Convert the selected Excel numbers value to Excel text by changing format
For Each cell In Selection
If Not IsEmpty(cell.Value) And IsNumeric(cell.Value) Then
Dim temp As Double
temp = cell.Value
cell.ClearContents
cell.NumberFormat = "@"
cell.Value = CStr(temp)
End If
Next cell


End Sub

Function RemoveFirstCharRebalance(RemFstChar As Variant) As String
Dim TempString As String

TempString = RemFstChar
If Left(RemFstChar, 1) = "0" Then
    If Len(RemFstChar) > 1 Then
        TempString = Right(RemFstChar, Len(RemFstChar) - 1)
    End If
End If
RemoveFirstCharRebalance = TempString

End Function

Function Test_File_Exist_With_Dir_Rebalance(fileName As String)
    Dim FilePath As String
    Dim TestStr As String

    FilePath = fileName

    TestStr = ""
    On Error Resume Next
    TestStr = Dir(FilePath)
    On Error GoTo 0
    If TestStr = "" Then
        MsgBox "File " & FilePath & " doesn't exist"
        End
    Else
       ' MsgBox "File exist"
    End If

End Function

Function Test_If_File_Is_Open_Rebalance(fileName As String)
    Dim TestWorkbook As Workbook

    Set TestWorkbook = Nothing
    On Error Resume Next
    Set TestWorkbook = Workbooks(fileName)
    On Error GoTo 0

    If TestWorkbook Is Nothing Then
       '
    Else
        MsgBox "File " & fileName & " is open; please close file before continuing"
        End
    End If

End Function

Function FindDuplicatesRebal()
    Dim cell As Range

    With Intersect(ActiveSheet.Columns("D"), ActiveSheet.UsedRange)
        For Each cell In .Cells
            If WorksheetFunction.CountIf(.Resize(cell.Row - .Rows(1).Row + 1), cell.Value) > 1 Then
            
                msg = MsgBox("There are duplicate account numbers; remove duplicates?", vbYesNo, "Duplicates Found")

                    If msg = vbYes Then
                    
                        Dim LastRow As Long
                        
                    
                        LastRow = Cells(Rows.Count, "A").End(xlUp).Row
                
                        Columns("A:E").Select
                        Range("E1").Activate
                        ActiveSheet.Range("$A$1:$E$" & LastRow).RemoveDuplicates Columns:=Array(1, 2, 3, 4, 5), _
                            Header:=xlYes
                            

                    Else
                      '
                    End If
                
                Exit Function
            
            End If
            
        Next cell
    End With

End Function

Function rebalancePart2(FilePath As String, tradeDateForFiles As Variant)


Application.Workbooks.OpenXML fileName:=FilePath


Dim fileName As String
fileName = "Last Rebal Final as of " & tradeDateForFiles & ".xlsx"
      


'unprotect the worksheet
ActiveSheet.Unprotect

Range("G2").Select
Application.CutCopyMode = False


ActiveCell.FormulaR1C1 = _
    "=VLOOKUP(C[-2],'[" & fileName & "]Upload'!C4:C5,2,0)"

Range("A1").Select
Selection.End(xlDown).Select
ActiveCell.Offset(0, 6).Select
Range(Selection, Selection.End(xlUp)).Select
Selection.FillDown
        
'format column G, then delete where column G is #N/A, and copy and paste values to column F
Columns("G:G").Select
Selection.NumberFormat = "m/d/yyyy"
        
Columns("G:G").Select
Selection.Copy
Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
    :=False, Transpose:=False


'loop and delete where N/A
Dim lr_xml As Long
Dim i_xml As Integer

lr_xml = Cells(Rows.Count, "A").End(xlUp).Row


For i_xml = 2 To lr_xml


    If IsError(Range("G" & i_xml)) Then
        Rows(i_xml).Delete
        i_xml = i_xml - 1
    
    End If
    
Next i_xml



'if there is data in cell from column G, copy in parallel column

lr_xml = Cells(Rows.Count, "A").End(xlUp).Row

For i_xml = 2 To lr_xml

    'if there is data in g2, copy its contents and paste into f2, then delete g2
        If Cells(i_xml, "G").Value <> "" Then
     
                Range("G" & i_xml).Select
                Selection.Copy
                Range("F" & i_xml).Select
                ActiveSheet.Paste
                Range("G" & i_xml).Select
                Selection.ClearContents
        
        End If
    
    
Next i_xml


ActiveWorkbook.Save
ActiveWorkbook.Close



End Function

Function countAndRenameFiles(TradeDate As String)
    Dim strDir As String
    Dim fso As Object
    Dim objFiles As Object
    Dim obj As Object
    Dim lngFileCount As Long
        
    
        
    strDir = "S:\Trading Dept\Ron Reyes\Last Rebal\XML Files Downloaded"
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    Set objFiles = fso.GetFolder(strDir).Files
    
    lngFileCount = objFiles.Count
    
    
    If lngFileCount <> 3 Then
        MsgBox "Please check that the 3 upload files are in folder " & strDir
        End
    End If
    
    
    Dim init As Integer
    init = 1
    
        For Each obj In objFiles
        
            Dim OldName, NewName
        
                OldName = strDir & "\" & obj.Name
    
                NewName = strDir & "\" & "Last Rebal " & init & " TD " & TradeDate & ".xml"
              
        
            Name OldName As NewName
        init = init + 1
        Next obj
    
    
    
    Set objFiles = Nothing
    Set fso = Nothing
    Set obj = Nothing
    
End Function

Function ConvertXmlToXlsxRebalance()

Application.DisplayAlerts = False

Dim objFSO As Object
Dim objFolder As Object
Dim objFile As Object
Dim fileName As String

'folder where xml files reside
xmlFolder = "S:\Trading Dept\Ron Reyes\Last Rebal\XML Files Downloaded\"

'folder where the converted files will be saved
convFolder = "S:\Trading Dept\Ron Reyes\Last Rebal\"

Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFolder = objFSO.GetFolder(xmlFolder)

    For Each objFile In objFolder.Files
        If UCase(Right(objFile.Name, Len(XML))) = UCase(XML) Then
        
            NewFileName = convFolder & objFile.Name & ".xlsx"
    
            Set ConvertThis = Workbooks.Open(objFolder & "\" & objFile.Name)
            NewFileName = Replace(NewFileName, ".xml", "")
            
            ConvertThis.SaveAs fileName:=NewFileName, FileFormat:= _
            xlOpenXMLWorkbook
            ConvertThis.Close
        End If
        
    Next objFile
End Function

Function XMLCountRows() As Integer
    Dim wb As Workbook, wbXLS As Workbook
    Dim sPath As String, sFilename As String
    Dim NbRows As Integer, rg As Range
    Dim totalRows As Integer
    DisplayAlerts = False
    Set wb = ThisWorkbook
    Application.ScreenUpdating = False
    sPath = "S:\Trading Dept\Ron Reyes\Last Rebal\XML Files Downloaded\"       'Path of XLS Files
    sFilename = Dir(sPath & "*.xml")
    On Error Resume Next
    Do While Len(sFilename) > 0
        If sFilename <> ThisWorkbook.FullName Then
            Set wbXLS = Workbooks.Open(sPath & sFilename)           'open file
            NbRows = wbXLS.Sheets(1).Range("A60000").End(xlUp).Row  'nb of rows
            Set rg = wb.Worksheets("Check").Range("A60000").End(xlUp).Offset(1, 0)
            rg = sFilename
            rg.Offset(0, 1) = NbRows
            totalRows = totalRows + NbRows
            wbXLS.Close False   'close file
        End If
        sFilename = Dir
    Loop
    XMLCountRows = totalRows - 3
    Application.ScreenUpdating = True
    DisplayAlerts = True
End Function

Function countDuplicates() As Long

    Dim N As Long, cl As Collection
    Dim dCount As Long, v As Variant
    
    N = Cells(Rows.Count, 1).End(xlUp).Row
    Set cl = New Collection
    dCount = 0
    
    For i = 1 To N
        v = Cells(i, 1).Value
        On Error Resume Next
        If v <> "" Then
            cl.Add v, CStr(v)
            If Err.Number = 0 Then
            Else
                Err.Number = 0
                dCount = dCount + 1
            End If
        End If
    Next i
    
 countDuplicates = dCount
     
End Function

Function moveXML()

    Dim strFolderA As String
    Dim strFolderB As String
    Dim strFile As String

    '//Change the path to the source folder, accordingly
    strFolderA = "S:\Trading Dept\Ron Reyes\Last Rebal\XML Files Downloaded\"
    
    '//Change the path to the destination folder, accordingly
    strFolderB = "S:\Trading Dept\Ron Reyes\Last Rebal\XML Files to Re-Upload\"
    
    If Right(strFolderA, 1) <> "\" Then strFolderA = strFolderA & "\"
    If Right(strFolderB, 1) <> "\" Then strFolderB = strFolderB & "\"
    
    '//To filter for .xlsx files, change "*.*" to "*.xlsx"
    strFile = Dir(strFolderA & "*.*")
    
    Do While Len(strFile) > 0

            Name strFolderA & strFile As strFolderB & strFile
            strFile = Dir

    Loop
    

End Function

Function removeDCA(fileType As String)


Dim tempWS As Worksheet
Set tempWS = ActiveSheet


'check for DCA file
Dim dcaFile As String

If fileType = "Schwab" Then
    dcaFile = "S:\Trading Dept\Ron Reyes\Last Rebal\DCA Master Summary\DCA Master Summary Report SEIA.xlsx"
Else
    dcaFile = "S:\Trading Dept\Ron Reyes\Last Rebal\DCA Master Summary\PERIODIC INVESTMENT PLAN.csv"
End If

Test_File_Exist_With_Dir_Rebalance (dcaFile)
Test_If_File_Is_Open_Rebalance (dcaFile)

'first book
Dim wbDCA As Workbook
Set wbDCA = Workbooks.Open(dcaFile)


Dim wsDCA As Worksheet


If fileType = "Schwab" Then
    Set wsDCA = wbDCA.Sheets("Sheet1")
Else
    Set wsDCA = wbDCA.Sheets("PERIODIC INVESTMENT PLAN")
End If



'loop and delete where N/A
Dim lr_DCA As Long
Dim i_DCA As Integer

lr_DCA = Cells(Rows.Count, "A").End(xlUp).Row


For i_DCA = 2 To lr_DCA
    
    wsDCA.Activate
    
    Dim acct As String
    Dim symbol As String
    Dim amount As Long


If fileType = "Schwab" Then
    acct = Cells(i_DCA, "A").Value
    symbol = Cells(i_DCA, "C").Value
    amount = Cells(i_DCA, "D").Value
Else
    acct = Cells(i_DCA, "B").Value
    symbol = Trim(Cells(i_DCA, "J").Value)
    amount = Cells(i_DCA, "X").Value
End If


If symbol = "" Then

Else
    acct = TrueTrim(acct)
    symbol = TrueTrim(symbol)
 
    'active schwab or fido sheet
    tempWS.Activate

    'find the row where data exist; if it does, delete that row, else don't do anything
  
    Dim recordRow As Long
    recordRow = FindMatchForDelete(acct, symbol, amount, fileType)

    
    If recordRow = 0 Then
    
    Else
    
     Rows(recordRow).EntireRow.Delete
    
    End If
    
End If

Next i_DCA

'close the SCA workbook
Application.DisplayAlerts = False
wbDCA.Close
Application.DisplayAlerts = True

End Function

Function FindMatchForDelete(x As String, y As String, z As Long, fileType As String) As Long
    Const Firstrow = 2
    Dim LastRow As Long
    Dim CurRow As Long
    
    If fileType = "Schwab" Then
    
        With ActiveSheet
            LastRow = .Range("A:A").Find(What:="*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row
            For CurRow = Firstrow To LastRow
        
                If Trim(.Range("A" & CurRow).Value) = x And Trim(.Range("F" & CurRow).Value) = y And Trim(.Range("O" & CurRow).Value) = z Then
                    FindMatchForDelete = CurRow
                    Exit For
                End If
                
        Next CurRow
        
        End With
    
    Else
    
        With ActiveSheet
            LastRow = .Range("A:A").Find(What:="*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row
            For CurRow = Firstrow To LastRow
        
                If Trim(.Range("A" & CurRow).Value) = x And Trim(.Range("H" & CurRow).Value) = y And Abs(Trim(.Range("M" & CurRow).Value)) = z Then
                    FindMatchForDelete = CurRow
                    Exit For
                    
                End If
                
        Next CurRow
        
        End With
    
    
    End If
    
 
 
End Function

Function TrueTrim(v As String) As String
Dim out As String
Dim bad As String
bad = "||127||129||141||143||144||160||173||" 'Characters that don't output something
       'the human eye can see based on http://www.gtwiki.org/mwiki/?title=VB_Chr_Values

out = v

'Chop off the first character so long as it's white space
If v <> "" Then
    Do While AscW(Left(out, 1)) < 33 Or InStr(1, bad, "||" & AscW(Left(out, 1)) & "||") <> 0 'Left(out, 1) = " " Or Left(out, 1) = Chr(9) Or Left(out, 1) = Chr(160)
        out = Right(out, Len(out) - 1)
    Loop

    'Chop off the last character so long as it's white space
    Do While AscW(Right(out, 1)) < 33 Or InStr(1, bad, "||" & AscW(Right(out, 1)) & "||") <> 0 'Right(out, 1) = " " Or Right(out, 1) = Chr(9) Or Right(out, 1) = Chr(160)
        out = Left(out, Len(out) - 1)
    Loop
End If 'else out = "" and there's no processing to be done

'Capture result for return
TrueTrim = out
End Function

